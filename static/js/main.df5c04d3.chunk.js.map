{"version":3,"sources":["components/AppFlash/index.js","components/AppNavBar/index.js","components/MessageBox/index.js","App.js","socketurls/index.js","serviceWorker.js","index.js","logo.svg"],"names":["AppFlash","react_default","a","createElement","className","src","logo","alt","Component","AppNavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isOpen","toggle","bind","assertThisInitialized","setState","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","MessageBox","_this$props","value","onSend","onChange","Form","onSubmit","event","preventDefault","InputGroup","Input","placeholder","InputGroupAddon","addonType","Button","App","_isMounted","client","messages","connected","message","connect","onMessageSend","_this2","mqtt","on","subscribe","err","topic","concat","toConsumableArray","target","trim","publish","_this3","_this$state","components_AppNavBar","components_MessageBox","e","onMessageChange","length","ListGroup","map","msg","index","ListGroupItem","key","toString","components_AppFlash","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.df5c04d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport logo from '../../logo.svg';\r\n\r\nclass AppFlash extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            <code>Connecting to react-room...</code>\r\n          </p>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppFlash;\r\n\r\n//functional component","import React, { Component } from 'react';\r\nimport logo from '../../logo.svg';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\n\r\nclass AppNavBar extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen: false,\r\n    };\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Navbar color=\"dark\" dark expand=\"md\">\r\n        <NavbarBrand href=\"/\"><img src={logo} className=\"App-logo\" alt=\"logo\" /><span>React Room</span> </NavbarBrand>\r\n        <NavbarToggler onClick={this.toggle} />\r\n        <Collapse isOpen={this.state.isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"https://m-mansoor-ali.github.io/react-room/\">GitHub</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default AppNavBar;","import React, { Component } from 'react';\r\nimport {\r\n    Button, Form, Input, InputGroup, InputGroupAddon\r\n} from 'reactstrap';\r\n\r\nclass MessageBox extends Component {\r\n \r\n    render() {\r\n        const {\r\n            value,\r\n            onSend,\r\n            onChange\r\n        } = this.props;\r\n\r\n        return (\r\n            <Form onSubmit={(event) => { event.preventDefault(); this.props.onSend() }}>\r\n                <code>Enter message and press enter / click send.</code>\r\n                <InputGroup>\r\n                    <Input placeholder=\"Enter message here...\" onChange={onChange} value={value} />\r\n                    <InputGroupAddon addonType=\"append\"><Button className=\"border-radius-0\" color=\"info\" onClick={onSend} >Send</Button></InputGroupAddon>\r\n                </InputGroup>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageBox;\r\n//functional","import React, { Component } from 'react';\nimport './App.css';\nimport AppFlash from './components/AppFlash';\nimport AppNavBar from './components/AppNavBar';\nimport MessageBox from './components/MessageBox';\nimport * as mqtt from 'mqtt';\nimport * as socketurls from './socketurls';\n\nimport {\n  ListGroup, ListGroupItem\n} from 'reactstrap';\n\nclass App extends Component {\n\n  _isMounted = false;\n  client = null;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n      connected: false,\n      message: '',\n    };\n    this.connect = this.connect.bind(this);    \n    this.onMessageSend = this.onMessageSend.bind(this);\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.connect();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  connect() {\n    this.client = mqtt.connect(socketurls.ECLIPSE_URL_SECURE);\n    this.client.on('connect', () => {\n      this.client.subscribe('react-room', (err) => {\n        if (!err) {\n          this.setState({\n            connected: true\n          });\n          //this.client.publish('react-room', 'Hello mqtt');\n        }\n      });\n      this.client.on('message', (topic, message) => {\n        //console.log(message.toString());\n        this.setState({\n          messages: [message, ...this.state.messages]\n        });\n      });\n    });\n  }\n\n  onMessageChange(event) {\n    this.setState({ message: event.target.value });\n  }\n\n  onMessageSend(event) {\n    if (this.state.message.trim() === \"\")\n      return;\n    this.client.publish('react-room', this.state.message.trim());\n    this.setState({ message: '' });\n  }\n\n  render() {\n    const {\n      connected,\n      message,\n      messages\n    } = this.state;\n    return (\n      <div>\n        <AppNavBar />\n        {!connected ?\n          <AppFlash /> : <div>\n            <MessageBox\n              value={message}\n              onChange={(e)=>{ this.onMessageChange(e)}}\n              onSend={this.onMessageSend}\n            />\n            <code>{messages.length === 0 ? \"Message queue is empty.\" : \"Message queue:\"}</code>\n            <ListGroup>\n              {\n                messages.map((msg, index) => {\n                  return <ListGroupItem key={\"msg\" + index} className=\"border-radius-0\" >{msg.toString()}</ListGroupItem>\n                })\n              }\n            </ListGroup>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const MOSQUITTO_URL = \"ws://test.mosquitto.org:8080\";\r\nexport const ECLIPSE_URL = \"ws://iot.eclipse.org:80/ws\";\r\nexport const ECLIPSE_URL_SECURE = \"wss://iot.eclipse.org:443/ws\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './bootstrap/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}